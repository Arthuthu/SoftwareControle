@inherits LayoutComponentBase

@inject ISessaoUsuario sessao
@inject IUsuarioEndpoints usuarioEndpoints
@inject IJSRuntime JSRuntime

<navbar>
    <div class="d-flex align-items-center">
        <a class="logo" href="/" id="anchor">
            Software Controle
        </a>
        <div>
            <img src="./icons/@iconeTema" class="icone-tema" @onclick="ToggleLightMode" 
                id="light-button"/>
        </div>
    </div>

    <AuthorizeView>
        <Authorized>
            <div class="d-flex">
                @if (UsuarioLogadoModel is not null && UsuarioLogadoModel.Cargo == "Administrador")
                {
                    <div>
                        <a class="nav-link" href="/usuarios" id="anchor">Usuarios</a>
                    </div>
                    <div>
                        <a class="nav-link" href="/relatorios" id="anchor">Relatorios</a>
                    </div>
                }
                <div>
                    <a class="nav-link" href="/ferramentas" id="anchor">Ferramentas</a>
                </div>
                <div>
                    <a class="nav-link" href="/ordens" id="anchor">Ordens</a>
                </div>
            </div>
            <div class="nav-links">
                <a class="nav-link" href="/usuario/@context.User.FindFirst(ClaimTypes.NameIdentifier)?.Value" id="anchor">
                    @context.User.FindFirst(ClaimTypes.Name)?.Value
                </a>
                <a class="nav-link" href="/logout" id="anchor">
                    <span>Sair</span>
                </a>
            </div>
        </Authorized>
        <NotAuthorized>
            <a class="nav-link" href="/login" id="anchor">
                <span>Entrar</span>
            </a>
         </NotAuthorized>
    </AuthorizeView>
</navbar>
<div>
    <main>
        <div>
            @Body
        </div>
    </main>
</div>

@code {
    private Guid UsuarioLogadoId { get; set; }
    private UsuarioModel? UsuarioLogadoModel { get; set; }

    private string iconeTema = "moonicon.png";


    protected override async Task OnInitializedAsync()
    {
        await BuscarUsuarioLogadoId();
        await BuscarUsuarioLogadoModel();
    }

    private async Task BuscarUsuarioLogadoId()
    {
        UsuarioLogadoId = await sessao.BuscarIdDoUsuarioLogado();
    }

    private async Task BuscarUsuarioLogadoModel()
    {
        if(UsuarioLogadoId != Guid.Empty)
            UsuarioLogadoModel = await usuarioEndpoints.BuscarPorId(UsuarioLogadoId);
    }

    private async Task ToggleLightMode()
    {
        await JSRuntime.InvokeVoidAsync("toggleLightMode");

        if (iconeTema == "moonicon.png")
        {
            iconeTema = "sunicon.png";
            return;
        };

        iconeTema = "moonicon.png";
    }
}
