@page "/ordens"

@inject ISessaoUsuario sessao
@inject IUsuarioEndpoints usuarioEndpoints
@inject IOrdemEndpoints ordemEndpoints
@inject NavigationManager navManager

@if (inicializado)
{
    @if(ListaOrdem is null || ListaOrdem.Count() == 0)
    {
        <div class="text-center my-5 fs-3 fw-bold">Não foi registrado nenhuma ordem</div>
    }
    else
    {
        <div class="elementos-lista" id="elementos-lista-label">
            <div class="elemento-node">Descrição</div>
            <div class="elemento-node">Urgência</div>
            <div class="elemento-node">Criado em</div>
            <div class="elemento-node">Prazo máximo</div>
            <div class="elemento-node">Situação</div>
            <div class="elemento-node">Responsável</div>
            <div class="elemento-node">Ferramenta</div>
        </div>
        <Virtualize Items="@ListaOrdem" Context="ordem" OverscanCount="50">
            <a class="elementos-lista" href="/ordem/@ordem.Id">
                <div class="elemento-node">@ordem.Descricao</div>
                <div class="elemento-node">@if(@ordem.NivelUrgencia.ToString() == "Urgente")
                    {
                        <div class="text-color-danger">Urgente</div>
                    }
                    else
                    {
                        <div>Normal</div>
                    }
                </div>
                <div class="elemento-node">@ordem.DataCriacao</div>
                <div class="elemento-node">@ordem.DataPrazoMaximo.ToString("dd/MM/yyyy")</div>
                <div class="elemento-node">@if (ordem.Situacao == "Espera")
                    {
                        <div class="situacao-espera">Espera</div>
                    } else if (ordem.Situacao == "Iniciada")
                    {
                        <div class="situacao-iniciada">Iniciada</div>
                    } else
                    {
                        <div class="situacao-finalizada">Finalizada</div>
                    }
                </div>
                <div class="elemento-node">@ordem.NomeResponsavel</div>
                <div class="elemento-node">@ordem.NomeFerramenta</div>
            </a>
        </Virtualize>
    }
}

@code {
    private Guid UsuarioLogadoId { get; set; }
    private List<OrdemModel>? ListaOrdem = new();

    private bool inicializado = false;

    protected override async Task OnInitializedAsync()
    {
        await BuscarUsuarioLogadoId();
        if(UsuarioLogadoId == Guid.Empty)
        {
            navManager.NavigateTo("/login");
            return;
        }

        await BuscarTodasAsOrdens();

        inicializado = true;
    }

    private async Task BuscarUsuarioLogadoId()
    {
        UsuarioLogadoId = await sessao.BuscarIdDoUsuarioLogado();
    }
    private async Task BuscarTodasAsOrdens()
    {
        ListaOrdem = await ordemEndpoints.Buscar();
    }
}
