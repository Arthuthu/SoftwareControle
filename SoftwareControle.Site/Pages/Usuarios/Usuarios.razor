@page "/usuarios"

@inject ISessaoUsuario sessao
@inject IUsuarioEndpoints usuarioEndpoints
@inject NavigationManager navManager

@if (inicializado)
{
	<div>
		<InputText @bind-Value="@usuarioLoginNome" class="ferramenta-buscar-input"
		@oninput="(e) => FilterFerramentaPorNome(e.Value?.ToString())"
				   placeholder="Procurar ferramenta por nome" />
	</div>
	@if (Ferramentas is null || Ferramentas.Count() == 0)
	{
		<div class="text-center my-5 fs-3 fw-bold">
			Não foi encontrado nenhuma ferramenta.
		</div>
	}
	else
	{
		<div class="ferramenta-list">
			<div class="ferramenta-node">Foto</div>
			<div class="ferramenta-node">Nome</div>
			<div class="ferramenta-node">Descrição</div>
			<div class="ferramenta-node">Disponibilidade</div>
		</div>
		<Virtualize Items="@Ferramentas" Context="ferramenta" OverscanCount="50">
			<a class="ferramenta-list" href="/ferramenta/@ferramenta.Id">
				<div class="ferramenta-node">
					@if (ferramenta.ImagemString != string.Empty)
					{
						<img src="data:image/jpeg;base64,@ferramenta.ImagemString" alt="Foto"
							 class="ferramentas-lista-foto">
					}
					else
					{
						<div class="ferramenta-node">Sem foto</div>
					}
				</div>
				<div class="ferramenta-node">@ferramenta.Nome</div>
				<div class="ferramenta-node">@ferramenta.Descricao</div>
				<div class="ferramenta-node">
					@if (ferramenta.Disponivel is true)
					{
						<div class="text-color-success">Disponivel</div>
					}
					else
					{
						<div class="text-color-danger">Indisponivel</div>
					}
				</div>
			</a>
		</Virtualize>
	}
	<div class="d-flex my-5 justify-content-end">
		@if (UsuarioLogadoModel!.Cargo == "Administrador")
		{
			<div>
				<a class="botao-principal" href="/ferramenta/criar">Adicionar</a>
			</div>
		}
		<div>
			<a class="botao-principal" href="/">Voltar</a>
		</div>
	</div>
}

@code {
	public Guid UsuarioLogadoId { get; set; }
	private UsuarioModel? UsuarioLogadoModel { get; set; }
	private List<UsuarioModel>? ListaUsuarios { get; set; }
	private List<UsuarioModel>? TodosUsuarios { get; set; }

	private bool inicializado = false;
	private string usuarioLoginNome = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await BuscarUsuarioLogadoId();
		if(UsuarioLogadoId == Guid.Empty)
		{
			navManager.NavigateTo("/login");
			return;
		}

		await BuscarUsuarioLogadoModel();
		if (UsuarioLogadoModel is null)
		{
			navManager.NavigateTo("/naoencontrado");
			return;
		}
		if (UsuarioLogadoModel.Cargo != "Administrador")
		{
			navManager.NavigateTo("/naoautorizado");
			return;
		}

		await BuscarTodosUsuarios();

		inicializado = true;
	}

	private async Task BuscarUsuarioLogadoId()
	{
		UsuarioLogadoId = await sessao.BuscarIdDoUsuarioLogado();
	}
	private async Task BuscarUsuarioLogadoModel()
	{
		UsuarioLogadoModel = await usuarioEndpoints.BuscarPorId(UsuarioLogadoId);
	}
	private async Task BuscarTodosUsuarios()
	{
		ListaUsuarios = await usuarioEndpoints.Buscar();
		TodosUsuarios = ListaUsuarios;
	}

	private void FilterFerramentaPorNome(string usuarioLoginNome);
	{
		
	}
}
